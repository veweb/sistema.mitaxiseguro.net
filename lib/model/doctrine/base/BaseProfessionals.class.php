<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Professionals', 'doctrine');

/**
 * BaseProfessionals
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $email
 * @property integer $phone
 * @property string $address
 * @property integer $professional_category_id
 * @property integer $state_id
 * @property integer $city_id
 * @property integer $zone_id
 * @property integer $published
 * @property integer $created_by
 * @property integer $updated_by
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * 
 * @method integer       getId()                       Returns the current record's "id" value
 * @method string        getName()                     Returns the current record's "name" value
 * @method string        getEmail()                    Returns the current record's "email" value
 * @method integer       getPhone()                    Returns the current record's "phone" value
 * @method string        getAddress()                  Returns the current record's "address" value
 * @method integer       getProfessionalCategoryId()   Returns the current record's "professional_category_id" value
 * @method integer       getStateId()                  Returns the current record's "state_id" value
 * @method integer       getCityId()                   Returns the current record's "city_id" value
 * @method integer       getZoneId()                   Returns the current record's "zone_id" value
 * @method integer       getPublished()                Returns the current record's "published" value
 * @method integer       getCreatedBy()                Returns the current record's "created_by" value
 * @method integer       getUpdatedBy()                Returns the current record's "updated_by" value
 * @method timestamp     getCreatedAt()                Returns the current record's "created_at" value
 * @method timestamp     getUpdatedAt()                Returns the current record's "updated_at" value
 * @method Professionals setId()                       Sets the current record's "id" value
 * @method Professionals setName()                     Sets the current record's "name" value
 * @method Professionals setEmail()                    Sets the current record's "email" value
 * @method Professionals setPhone()                    Sets the current record's "phone" value
 * @method Professionals setAddress()                  Sets the current record's "address" value
 * @method Professionals setProfessionalCategoryId()   Sets the current record's "professional_category_id" value
 * @method Professionals setStateId()                  Sets the current record's "state_id" value
 * @method Professionals setCityId()                   Sets the current record's "city_id" value
 * @method Professionals setZoneId()                   Sets the current record's "zone_id" value
 * @method Professionals setPublished()                Sets the current record's "published" value
 * @method Professionals setCreatedBy()                Sets the current record's "created_by" value
 * @method Professionals setUpdatedBy()                Sets the current record's "updated_by" value
 * @method Professionals setCreatedAt()                Sets the current record's "created_at" value
 * @method Professionals setUpdatedAt()                Sets the current record's "updated_at" value
 * 
 * @package    sistem-taxi
 * @subpackage model
 * @author     Walter Rosales
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProfessionals extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('professionals');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('phone', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('address', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('professional_category_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('state_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('city_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('zone_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('published', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('created_by', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('updated_by', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}